<?xml version="1.0" encoding="utf-8"?>
<Project 
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="4.0"
  InitialTargets="PackTargetsInitialTargets"
>
  <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets"/>
  <Import Project="$(MxbuildDir)empty.targets" />

  <Target Name="PackTargetsInitialTargets">

    <!--package-->
    <PropertyGroup>
      <!--$(NuspecId) is declared in nuspec.props which resides next to the .csproj file-->
      <NugetPackagePath>$(PackDir)$(NuspecId).$(NuspecVersion)$(NugetPackageExt)</NugetPackagePath>
    </PropertyGroup>

    <!--msbuild /v:m /p:platform=pack /t:_PackCreate /p:Assemblies=-->
    <ItemGroup Condition="'$(Assemblies)'!=''">
      <TargetResult Include="$(Assemblies)"/>
    </ItemGroup>
    
  </Target>
  
  <!--augment TargetResult-->
  <!--<ItemGroup>
    <TargetResult Condition="true">
      <OutSubDir>$([MSBuild]::MakeRelative($(OutBaseDir), %(TargetResult.RootDir)%(Directory)))</OutSubDir>
    </TargetResult>
  </ItemGroup>-->

  <PropertyGroup>
    <BuildDependsOn>
      _CopySourceItemsToOutputDirectory;
      _PackCreate;
      $(BuildDependsOn)
    </BuildDependsOn>
    <!--<BuildDependsOn>
      $(BuildDependsOn)
      _UnpackBuild;
    </BuildDependsOn>-->
  </PropertyGroup>

  <!--_UnpackBuild-->
  <Target
    Name="_UnpackBuild"
    DependsOnTargets="_UnpackStage" 
    Condition="'$(SkipPackageCheck)'!='true'"
  >
    <MSBuild
      Projects="$(ProjFile)"
      Targets="MakeLogDir"
      Properties="BuildName=Unpack;BuildTarget=Build;BuildLogDir=$(UnpackLogDir)"
    >
      <Output ItemName="UnpackBuildLogs" TaskParameter="TargetOutputs" />
    </MSBuild>

    <PropertyGroup>
      <_LogFileType>build.unpack</_LogFileType>

      <_CommandLine>$(MSBuildExe) $(UnpackBuildDir)NugetUpdate.sln</_CommandLine>
      <_CommandLine>$(_CommandLine) /t:Build</_CommandLine>
      <_CommandLine>$(_CommandLine) /p:Platform=AnyCPU</_CommandLine>
      <_CommandLine>$(_CommandLine) /p:Configuration=$(Configuration)</_CommandLine>
      <_CommandLine>$(_CommandLine) /m</_CommandLine>
      <_CommandLine>$(_CommandLine) $(Properties)</_CommandLine>
      <_CommandLine>$(_CommandLine) @(UnpackBuildLogs, ' ')</_CommandLine>
    </PropertyGroup>

    <Exec Command="$(_CommandLine)" WorkingDirectory="$(UnpackAfterDir)" />
  </Target>

  <!--_UnpackStage-->
  <Target
    Name="_UnpackStage"
    DependsOnTargets="_UnpackUpdate"
  >
    <ItemGroup>
      <_SourceFiles Include="$(UnpackAfterDir)**\*" />
    </ItemGroup>

    <!--before-->
    <MakeDir Directories="$(UnpackBeforeDir)" />
    <Copy
      SourceFiles="@(_SourceFiles)"
      DestinationFolder="$(UnpackBuildDir)\%(RecursiveDir)"
      SkipUnchangedFiles="true"
    />

    <Message Importance="high" Text="$(MSBuildProjectName) -> $(UnpackAfterDir) => $(UnpackBuildDir)" />
  </Target>

  <!--_UnpackUpdate-->
  <Target
    Name="_UnpackUpdate"
    DependsOnTargets="_UnpackRestore" >

    <PropertyGroup>
      <_Command>$(NugetExe) update NugetUpdate.sln</_Command>
      <_Command>$(_Command) -id Xamarin.Forms.CarouselView</_Command>
      <_Command>$(_Command) -RepositoryPath packages</_Command>
      <_Command>$(_Command) -Source $(PackDir)</_Command>
      <_Command>$(_Command) -Source $(NugetFeed)</_Command>
      <_Command>$(_Command) -Verbosity detailed</_Command>
      <_Command>$(_Command) -Prerelease</_Command>

      <_Log>$(UnpackLogDir)update.log</_Log>
    </PropertyGroup>

    <WriteLinesToFile Lines="$(_Command)" File="$(_Log)" Overwrite="true" />
    <Exec
      Command="$(_Command) &gt;&gt; $(_Log)"
      WorkingDirectory="$(UnpackAfterDir) "
    />
    <Message Importance="$(PackVerbosity)" Text="nuget.exe update -&gt; $(_Log)" />
  </Target>

  <!--_UnpackRestore-->
  <Target
    Name="_UnpackRestore"
    DependsOnTargets="_UnpackCopy" >

    <PropertyGroup>
      <_Command>$(NugetExe) restore NugetUpdate.sln</_Command>
      <_Command>$(_Command) -Source $(PackDir)</_Command>
      <_Command>$(_Command) -Source $(NugetFeed)</_Command>
      <_Command>$(_Command) -Verbosity detailed</_Command>
      <_Command>$(_Command) -NoCache</_Command>

      <_Log>$(UnpackLogDir)restore.log</_Log>
    </PropertyGroup>
    
    <WriteLinesToFile Lines="$(_Command)" File="$(_Log)" Overwrite="true" />
    <Exec
      Command="$(_Command) &gt;&gt; $(_Log)"
      WorkingDirectory="$(UnpackAfterDir)"
    />
    <Message Importance="$(PackVerbosity)" Text="nuget.exe restore -&gt; $(_Log)" />
  </Target>

  <!--_UnpackCopy-->
  <Target
    Name="_UnpackCopy"
    DependsOnTargets="_PackCreate"
  >
    <ItemGroup>
      <UnpackSolutionFiles Include="$(ProjDir)Unpack\**\*" />
    </ItemGroup>

    <!--before-->
    <MakeDir Directories="$(UnpackBeforeDir)" />
    <Copy
      SourceFiles="@(UnpackSolutionFiles)"
      DestinationFolder="$(UnpackBeforeDir)\%(RecursiveDir)"
      SkipUnchangedFiles="true"
    />

    <!--after-->
    <MakeDir Directories="$(UnpackAfterDir)" />
    <Copy 
      SourceFiles="@(UnpackSolutionFiles)" 
      DestinationFolder="$(UnpackAfterDir)\%(RecursiveDir)"
      SkipUnchangedFiles="true" 
    />

    <Message Importance="high" Text="$(MSBuildProjectName) -> $(UnpackBeforeDir) => $(UnpackAfterDir)" />
  </Target>

  <!--_PackCreate-->
  <Target
    Name="_PackCreate"
    DependsOnTargets="_PackCreateIfNecessary"
  >
    <Message Importance="$(PackVerbosity)" Text="$(MSBuildProjectName) -> $(NuspecPath)" />
    <Message Importance="high" Text="$(MSBuildProjectName) -> $(NugetPackagePath)" />
  </Target>

  <!--_PackCreateIfNecessary-->
  <Target
    Name="_PackCreateIfNecessary"
    Inputs="$(NuspecPath);@(TargetResult)"
    Outputs="$(NugetPackagePath)"
    DependsOnTargets="RefreshTemplateExpansions"
  >
    <MakeDir Directories="$(PackDir)" />

    <PropertyGroup>
      <_Command>$(NugetExe)</_Command>
      <_Command>$(_Command) pack $(NuspecPath)</_Command>
      <_Command>$(_Command) -OutputDirectory $(PackDir)</_Command>
    </PropertyGroup>
    <Exec Command="$(_Command) >NUL" />
  </Target>

  <!--
    Pack.targets to adopt MS.Common.targets
      PackCreate -> CoreCompile
      Get/Add NugetAssemblyAttributes after ResolveAssemblyReference
    RefreshTemplateExpansions hook like Custom Tool
  -->
  
  <!--_GetNugetAssemblyAttributes-->
  <Target
    Name="_GetNugetAssemblyAttributes"
    BeforeTargets="RefreshTemplateExpansions"
    DependsOnTargets="_AddNugetAssemblyAttributes"
    Outputs="%(NuspecReference.Identity)"
  >
    <ItemGroup>
      <NugetDependencyAttributeMap Include="NugetDependencyAttribute">
        <Package>Identity</Package>
        <Version/>
      </NugetDependencyAttributeMap>
    </ItemGroup>

    <GetAssemblyAttribute
      Assemblies="@(NuspecReference)"
      Attribute="@(NugetDependencyAttributeMap)"
    >
      <Output ItemName="NuspecDependency" TaskParameter="Result" />
    </GetAssemblyAttribute>

    <!--IsPreReleaseVersion-->
    <ItemGroup>
      <NuspecDependency Condition="true">
        <IsPreReleaseVersion>$([System.Text.RegularExpressions.Regex]::IsMatch('%(NuspecDependency.Version)','.*-.*'))</IsPreReleaseVersion>
      </NuspecDependency>
    </ItemGroup>

    <!--NuspecPreReleaseVersion-->
    <PropertyGroup>
      <NuspecPreReleaseVersion Condition="'$(NuspecVersion)'=='0.0.0'">pre</NuspecPreReleaseVersion>
      <NuspecPreReleaseVersion Condition="'@(NuspecDependency->AnyHaveMetadataValue('IsPreReleaseVersion','true'))'=='true'">pre</NuspecPreReleaseVersion>
      <NuspecVersion Condition="'$(NuspecPreReleaseVersion)'!=''">$(NuspecVersion)-$(NuspecPreReleaseVersion)</NuspecVersion>
    </PropertyGroup>

  </Target>

  <!--_AddNugetAssemblyAttributes-->
  <Target
    Name="_AddNugetAssemblyAttributes"
  >
    <ItemGroup>
      <NugetPackageAttributeMap Include="NugetPackageAttribute">
        <TargetFramework/>
      </NugetPackageAttributeMap>
    </ItemGroup>

    <AddAssemblyAttribute
      Assemblies="@(TargetResult)"
      Attributes="@(NugetPackageAttributeMap)"
    >
      <Output ItemName="NuspecReference" TaskParameter="Result" />
    </AddAssemblyAttribute>
  </Target>
</Project>