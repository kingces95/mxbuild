<?xml version="1.0" encoding="utf-8"?>
<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  ToolsVersion="12.0" 
  InitialTargets="InitialGenTarget"
>

  <ItemDefinitionGroup>
    <Template>
      <CompileOutput />
      <Type />
    </Template>
  </ItemDefinitionGroup>

  <!--InitialGenTarget-->
  <Target
    Name="InitialGenTarget"
  >
    <!--copy None items with IsMxbuildTemplet to Template items-->
    <ItemGroup>
      <Template Include="@(None->WithMetadataValue('IsMxbuildTemplate', 'True'))"/>
      <Template Condition="'%(Template.Link)'!=''">
        <ProjectPath>%(Template.Link)</ProjectPath>
      </Template>
      <Template Condition="'%(Template.ProjectPath)'==''">
        <ProjectPath>%(Template.Identity)</ProjectPath>
      </Template>
      <Template Condition="'%(Template.CompileOutput)'!=''">
        <CompileProjectPath>$([System.IO.Path]::GetDirectoryName('%(Template.ProjectPath)'))\%(CompileOutput)</CompileProjectPath>
      </Template>
    </ItemGroup>

    <!--trim None items of templates (so they don't get copied to the output before transforming)-->
    <ItemGroup>
      <None Remove="@(Template)" />
    </ItemGroup>
    
    <!--augment Compile items with ProjectPath-->
    <ItemGroup>
      <Compile Condition="'%(Compile.Link)'!=''">
        <ProjectPath>%(Compile.Link)</ProjectPath>
      </Compile>
      <Compile Condition="'%(Compile.ProjectPath)'==''">
        <ProjectPath>%(Compile.Identity)</ProjectPath>
      </Compile>
    </ItemGroup>
  </Target>

  <!--RefreshTemplateExpansions-->
  <Target
    Name="RefreshTemplateExpansions"
    Outputs="%(Template.Identity)"
    Condition="@(Template->Count()) > 0"
  >
    <PropertyGroup>
      <Template>@(Template)</Template>
      <TemplateType>lineByLine</TemplateType>
      <TemplateType Condition="'%(Template.Extension)'=='.xml'">xml</TemplateType>
      <TemplateType Condition="'%(Template.Type)'!=''">%(Type)</TemplateType>

      <!--get path of template project artifact (i.e. account for links)-->
      <TemplateProjectPath>%(Template.ProjectPath)</TemplateProjectPath>

      <!--get output path of expansion-->
      <TemplateProjectPathAbsolute>$([System.IO.Path]::GetFullPath('$(TemplateProjectPath)'))</TemplateProjectPathAbsolute>
      <TemplateProjectRelPath>$([MSBuild]::MakeRelative($(ProjDir), $(TemplateProjectPathAbsolute)))</TemplateProjectRelPath>
      <TemplateProjectRelDir>$([System.IO.Path]::GetDirectoryName($(TemplateProjectRelPath)))</TemplateProjectRelDir>
      <TemplateTargetName>%(Template.CopyTargetName)</TemplateTargetName>
      <TemplateTargetName Condition="'$(TemplateTargetName)'==''">%(Template.Filename)%(Template.Extension)</TemplateTargetName>
      <TemplateTargetRelPath>$([System.IO.Path]::Combine($(TemplateProjectRelDir),$(TemplateTargetName)))</TemplateTargetRelPath>
      <TemplateTempPath>$(IntermediateOutputPath)$(TemplateTargetRelPath)</TemplateTempPath>
      <TemplateOutputPath>$(OutDir)$(TemplateTargetRelPath)</TemplateOutputPath>
    </PropertyGroup>
    
    <!--log paths-->
    <Message Text="Template: $(Template)" Importance="$(GenVerbosityLow)" />
    <Message Text="TemplateProjectPath: $(TemplateProjectPath)" Importance="$(GenVerbosityLow)" />
    <Message Text="TemplateTempPath: $(TemplateTempPath)" Importance="$(GenVerbosityLow)" />
    <Message Text="TemplateOutputPath: $(TemplateOutputPath)" Importance="$(GenVerbosityLow)" />

    <!--find properties-->
    <PropertyGroup>
      <TemplateText>$([System.IO.File]::ReadAllText($(Template)))</TemplateText>
    </PropertyGroup>
    <RegexMatches
      Input="$(TemplateText)"
      Pattern="(?&lt;=[$][(]).*?(?=[)])"
    >
      <Output ItemName="TemplatePropertyNames" TaskParameter="Matches" />
    </RegexMatches>

    <!--load properties-->
    <ItemGroup>
      <Pattern Include="@(TemplatePropertyNames->'[$(Ds)][(]%(Identity)[)]')">
        <Name>%(Identity)</Name>
        <Replacement>$(%(Identity))</Replacement>
      </Pattern>
    </ItemGroup>
    
    <!--log properties-->
    <Message Text="Properties (@(Pattern->Count())):" Importance="$(GenVerbosityLow)" />
    <Message Text="  %(Pattern.Name) -> %(Replacement)" Condition="'%(Replacement)'!=''" Importance="$(GenVerbosityLow)" />
    <Message Text="  %(Pattern.Name) -> [null]" Condition="'%(Replacement)'==''" Importance="$(GenVerbosityLow)" />

    <!--process properties-->
    <RegexReplace
      Input="$(TemplateText)"
      Pattern="@(Pattern)"
    >
      <Output PropertyName="ExpansionText" TaskParameter="Result" />
    </RegexReplace>

    <!--find items-->
    <RegexMatches
      Input="$(ExpansionText)"
      Pattern="(?&lt;=[%][(])\w*?(?=[.]\w*[)])"
    >
      <Output ItemName="TemplateItemsNames" TaskParameter="Matches" />
    </RegexMatches>

    <!--load items-->
    <ItemGroup>
      <TemplateItems 
        Include="@(%(TemplateItemsNames.Identity))"
        Condition="@(TemplateItemsNames->Count()) > 0"
      >
        <__Name>%(Identity)</__Name>
      </TemplateItems>
    </ItemGroup>
    
    <!--log items-->
    <Message Text="Item Names:" Importance="$(GenVerbosityLow)" />
    <Message Text="  %(TemplateItemsNames.Identity)" Importance="$(GenVerbosityLow)" Condition="@(TemplateItemsNames->Count()) > 0" />
    <Message Text="Items (@(TemplateItems->Count())):" Importance="$(GenVerbosityLow)" />
    <Message Text="  %(TemplateItems.__Name)" Importance="$(GenVerbosityLow)" Condition="@(TemplateItems->Count()) > 0" />
    
    <!--process items-->
    <ExpandTemplate
      Input="$(ExpansionText)"
      Items="@(TemplateItems)"
      Type="$(TemplateType)"
      Condition="@(TemplateItemsNames->Count()) > 0"
    >
      <Output PropertyName="ExpansionText" TaskParameter="Result" />
    </ExpandTemplate>

    <!--write temp file-->
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(TemplateTempPath)'))" />
    <WriteTextToFile
      File="$(TemplateTempPath)"
      Text="$(ExpansionText)"
      Overwrite="true"
    />
    <Message
      Text="$(TemplateProjectPath) -> $(TemplateTempPath)"
      Importance="$(GenVerbosity)" 
    />

    <!--copy to output-->
    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('$(TemplateOutputPath)'))" />
    <Diff 
      SourceFiles="$(TemplateTempPath)"
      TargetFiles="$(TemplateOutputPath)"
      IgnoreLastWriteTime="true"
      Condition="'%(Template.CopyToOutputDirectory)'=='PreserveNewest'"
    >
      <Output PropertyName="IsDifferent" TaskParameter="IsDifferent" />
    </Diff>
    <Copy
      Condition="'%(Template.CopyToOutputDirectory)'=='Always' OR '$(IsDifferent)'=='true'"
      SourceFiles="$(TemplateTempPath)"
      DestinationFiles="$(TemplateOutputPath)"
    />

    <!--substitute expanded result-->
    <PropertyGroup>
      <TemplateCompileProjectPath>%(Template.CompileProjectPath)</TemplateCompileProjectPath>
      <CompileTarget>@(Compile->WithMetadataValue('ProjectPath', '$(TemplateCompileProjectPath)')->'%(Identity)')</CompileTarget>
    </PropertyGroup>
    <Message
      Text="Compile: $(TemplateCompileProjectPath) -> $(TemplateTempPath)"
      Condition="'$(TemplateCompileProjectPath)'!=''"
      Importance="$(GenVerbosity)" 
    />
    <ItemGroup Condition="'$(TemplateCompileProjectPath)'!=''">
      <Compile Include="@(Compile->WithMetadataValue('Identity', '$(CompileTarget)')->'$(TemplateTempPath)')"/>
      <Compile Remove="@(Compile->WithMetadataValue('Identity', '$(CompileTarget)')->'%(Identity)')"/>
    </ItemGroup>
  </Target>

</Project>